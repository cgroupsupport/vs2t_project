//*****************************************************************************
//*****************************************************************************
//  FILENAME: SPIM_2.h
//   Version: 2.6, Updated on 2014/7/14 at 8:16:32
//  Generated by PSoC Designer 5.4.2946
//
//  DESCRIPTION:
//    SPIM_2 SPIM User Module header file.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2014. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef SPIM_2_INCLUDE
#define SPIM_2_INCLUDE

#include <m8c.h>

#pragma fastcall16  SPIM_2_EnableInt
#pragma fastcall16  SPIM_2_DisableInt
#pragma fastcall16  SPIM_2_Start
#pragma fastcall16  SPIM_2_Stop
#pragma fastcall16  SPIM_2_SendTxData
#pragma fastcall16  SPIM_2_bReadRxData
#pragma fastcall16  SPIM_2_bReadStatus

//-------------------------------------------------
// Prototypes of the SPIM_2 API.
//-------------------------------------------------
extern void  SPIM_2_EnableInt(void);
extern void  SPIM_2_DisableInt(void);
extern void  SPIM_2_Start(BYTE bConfiguration);
extern void  SPIM_2_Stop(void);
extern void  SPIM_2_SendTxData(BYTE bTxData);
extern BYTE  SPIM_2_bReadRxData(void);
extern BYTE  SPIM_2_bReadStatus(void);

// Old function prototypes, Do not use
// These will be removed in a future release
#pragma fastcall16 bSPIM_2_ReadRxData
#pragma fastcall16 bSPIM_2_ReadStatus
extern BYTE bSPIM_2_ReadRxData(void);
extern BYTE bSPIM_2_ReadStatus(void);


//-------------------------------------------------
// Constants for SPIM_2 API's.
//-------------------------------------------------

#define SPIM_2_INT_REG_ADDR                    ( 0x0e1 )
#define SPIM_2_bINT_MASK                       ( 0x80 )

//*******************************
// SPI Configuration definitions
//*******************************
#define  SPIM_2_SPIM_MODE_0            0x00      // MODE 0 - Leading edge latches data - pos clock
#define  SPIM_2_SPIM_MODE_1            0x02      // MODE 1 - Leading edge latches data - neg clock
#define  SPIM_2_SPIM_MODE_2            0x04      // MODE 2 - Trailing edge latches data - pos clock
#define  SPIM_2_SPIM_MODE_3            0x06      // MODE 3 - Trailing edge latches data - neg clock
#define  SPIM_2_SPIM_LSB_FIRST         0x80      // LSB bit transmitted/received first
#define  SPIM_2_SPIM_MSB_FIRST         0x00      // MSB bit transmitted/received first

//********************************
// SPI Status register masks
//********************************
#define  SPIM_2_SPIM_RX_OVERRUN_ERROR  0x40      // Overrun error in received data
#define  SPIM_2_SPIM_TX_BUFFER_EMPTY   0x10      // TX Buffer register is ready for next data byte
#define  SPIM_2_SPIM_RX_BUFFER_FULL    0x08      // RX Buffer register has received current data
#define  SPIM_2_SPIM_SPI_COMPLETE      0x20      // SPI Tx/Rx cycle has completed

//-------------------------------------------------
// Register Addresses for SPIM_2
//-------------------------------------------------
#pragma ioport  SPIM_2_CONTROL_REG: 0x03f                  //Control register
BYTE            SPIM_2_CONTROL_REG;
#pragma ioport  SPIM_2_SHIFT_REG:   0x03c                  //TX Shift Register register
BYTE            SPIM_2_SHIFT_REG;
#pragma ioport  SPIM_2_TX_BUFFER_REG:   0x03d              //TX Buffer Register
BYTE            SPIM_2_TX_BUFFER_REG;
#pragma ioport  SPIM_2_RX_BUFFER_REG:   0x03e              //RX Buffer Register
BYTE            SPIM_2_RX_BUFFER_REG;
#pragma ioport  SPIM_2_FUNCTION_REG:    0x13c              //Function register
BYTE            SPIM_2_FUNCTION_REG;
#pragma ioport  SPIM_2_INPUT_REG:   0x13d                  //Input register
BYTE            SPIM_2_INPUT_REG;
#pragma ioport  SPIM_2_OUTPUT_REG:  0x13e                  //Output register
BYTE            SPIM_2_OUTPUT_REG;

#endif
// end of file SPIM_2.h
